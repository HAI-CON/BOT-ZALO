from zlapi.models import *
from zlapi import Message, ThreadType
import requests
from io import BytesIO

des = {
    'version': "1.0.2",
    'credits': "V≈© Xu√¢n Ki√™n",
    'description': "Xo√° tin nh·∫Øn ng∆∞·ªùi d√πng"
}

def get_info(uid):
    url = f"https://ff-community-api.vercel.app/ff.Info?uid={uid}"
    try:
        res = requests.get(url, timeout=10)
        if res.status_code == 200:
            return res.json()
    except:
        pass
    return None

def get_mitaizl(message, message_object, thread_id, thread_type, author_id, client):
    args = message.strip().split()

    if len(args) < 2:
        return client.replyMessage(
            Message(text="‚ùå Vui l√≤ng nh·∫≠p UID Free Fire.\nV√≠ d·ª•: ff 123456789"),
            message_object, thread_id, thread_type
        )

    uid = args[1]

    client.replyMessage(
        Message(text="üîç ƒêang l·∫•y th√¥ng tin t√†i kho·∫£n..."),
        message_object, thread_id, thread_type
    )

    data = get_info(uid)
    if not data or data.get("status") != 200:
        return client.replyMessage(
            Message(text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin UID n√†y ho·∫∑c API l·ªói."),
            message_object, thread_id, thread_type
        )

    result = data.get("result", {})

    # G·ª≠i avatar n·∫øu c√≥
    avatar_url = result.get("avatar")
    if avatar_url:
        try:
            response = requests.get(avatar_url)
            image_bytes = BytesIO(response.content).getvalue()
            client.sendMessageImage(image_bytes, message_object, thread_id, thread_type)
        except:
            pass  # Kh√¥ng g·ª≠i avatar n·∫øu l·ªói t·∫£i

    # L·∫•y th√¥ng tin ch√≠nh
    nickname = result.get("nickname", "Kh√¥ng r√µ")
    level = result.get("level", "N/A")
    region = result.get("region", "N/A")
    survival_rank = result.get("rankedSurvival", "N/A")
    stars = result.get("totalStars", "N/A")
    like = result.get("likes", "0")
    last_login = result.get("lastLogin", "Kh√¥ng r√µ")
    language = result.get("language", "Kh√¥ng r√µ")
    about = result.get("about", "Kh√¥ng c√≥")

    # Qu√¢n ƒëo√†n
    guild = result.get("guild", {})
    guild_name = guild.get("name", "Kh√¥ng c√≥")
    guild_level = guild.get("level", "N/A")
    guild_capacity = guild.get("capacity", "N/A")
    guild_member = guild.get("currentMembers", "N/A")
    guild_owner = guild.get("ownerName", "N/A")
    guild_owner_level = guild.get("ownerLevel", "N/A")

    # Pet v√† k·ªπ nƒÉng
    pet = result.get("pet", {})
    pet_name = pet.get("name", "Kh√¥ng c√≥")
    pet_level = pet.get("level", "N/A")
    skill = result.get("characterSkill", "Kh√¥ng r√µ")

    # So·∫°n tin nh·∫Øn tr·∫£ v·ªÅ
    text = f"""üìÑ Th√¥ng tin Free Fire:

üë§ Nickname: {nickname}
‚≠ê C·∫•p ƒë·ªô: {level}
üåç Khu v·ª±c: {region}
üèÜ Rank Sinh t·ªìn: {survival_rank}
üåü T·ªïng sao T·ª≠ chi·∫øn: {stars}
‚ù§Ô∏è Like: {like}
üïí ƒêƒÉng nh·∫≠p g·∫ßn nh·∫•t: {last_login}
üó£Ô∏è Ng√¥n ng·ªØ: {language}
üìú Ti·ªÉu s·ª≠: {about}

üî∞ Qu√¢n ƒëo√†n:
üèòÔ∏è T√™n: {guild_name}
üéñÔ∏è C·∫•p: {guild_level}
üë• S·ª©c ch·ª©a: {guild_capacity}
üë§ Th√†nh vi√™n: {guild_member}
üëë Ch·ªß: {guild_owner} (Lv {guild_owner_level})

üêæ Kh√°c:
üß† K·ªπ nƒÉng: {skill}
üê∂ Pet: {pet_name} (Lv {pet_level})
"""

    client.replyMessage(Message(text=text), message_object, thread_id, thread_type)

def get_szl():
    return {
        'ff2': get_mitaizl
    }