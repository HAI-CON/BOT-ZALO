from PIL import Image, ImageDraw, ImageFont, ImageFilter
import os
import random
from datetime import datetime
import requests
from zlapi.models import Message
import io

des = {
    'version': "1.0.2",
    'credits': "Nguy·ªÖn ƒê·ª©c T√†i",
    'description': "Xem to√†n b·ªô l·ªánh hi·ªán c√≥ c·ªßa bot"
}

# ƒê∆∞·ªùng d·∫´n font
FONT_TEXT_PATH = "font/arial.ttf"  # Font ch·ªØ ch√≠nh
FONT_ICON_PATH = "font/NotoEmoji-Bold.ttf"  # Font ch·ª©a icon

BACKGROUND_DIR = "background/"

def get_random_background():
    """Ch·ªçn ng·∫´u nhi√™n m·ªôt ·∫£nh n·ªÅn t·ª´ th∆∞ m·ª•c background."""
    if not os.path.exists(BACKGROUND_DIR):
        return None
    images = [f for f in os.listdir(BACKGROUND_DIR) if f.endswith((".png", ".jpg", ".jpeg"))]
    return os.path.join(BACKGROUND_DIR, random.choice(images)) if images else None

def create_image():
    """T·∫°o ·∫£nh menu bot v·ªõi icon n·∫±m c·∫£ tr∆∞·ªõc v√† sau ch·ªØ"""
    image_path = get_random_background()
    if not image_path:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n·ªÅn!")
        return None

    try:
        size = (1124, 450)
        box_color = (255, 255, 255, 180)  # Tr·∫Øng trong su·ªët
        text_color = (255, 105, 180)  # H·ªìng

        # M·ªü ·∫£nh n·ªÅn, resize v√† l√†m m·ªù
        bg_image = Image.open(image_path).convert("RGBA").resize(size).filter(ImageFilter.GaussianBlur(8))

        # T·∫°o overlay h·ªôp trong su·ªët
        overlay = Image.new("RGBA", size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(overlay)
        draw.rounded_rectangle([(150, 80), (size[0] - 150, size[1] - 100)], radius=35, fill=box_color)
        bg_image = Image.alpha_composite(bg_image, overlay)

        # Load font ch·ªØ ch√≠nh v√† font icon
        try:
            font_text = ImageFont.truetype(FONT_TEXT_PATH, 40)
            font_icon = ImageFont.truetype(FONT_ICON_PATH, 40)
            date_font = ImageFont.truetype(FONT_TEXT_PATH, 35)
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i font: {e}")
            return None

        # Danh s√°ch text (icon tr∆∞·ªõc v√† sau ch·ªØ)
        text_lines = [
            ("üí°", "Xin ch√†o, t√¥i l√† Minh V≈©", "üí°"),
            ("üìú", "ƒê√¢y l√† l·ªánh i4tt c·ªßa bot", "üìú"),
            ("ü§ñ", "Bot: Music | M.V≈© Y√™u M.Anh", "ü§ñ"),
            ("üéß", "H√£y fl _m.vu210_", "üéß")  # D√≤ng th√™m m·ªõi
        ]

        # T√≠nh to√°n v·ªã tr√≠ ch·ªØ trong h·ªôp
        text_height = len(text_lines) * 50
        start_y = (80 + size[1] - 100 - text_height) // 2
        draw = ImageDraw.Draw(bg_image)

        for icon_start, text, icon_end in text_lines:
            icon_width_start = draw.textlength(icon_start, font=font_icon)
            text_width = draw.textlength(text, font=font_text)
            icon_width_end = draw.textlength(icon_end, font=font_icon)
            
            total_width = icon_width_start + text_width + icon_width_end + 20
            x_pos = (size[0] - total_width) // 2

            # V·∫Ω icon tr∆∞·ªõc
            draw.text((x_pos, start_y), icon_start, font=font_icon, fill=text_color)

            # V·∫Ω ch·ªØ gi·ªØa hai icon
            draw.text((x_pos + icon_width_start + 10, start_y), text, font=font_text, fill=text_color)

            # V·∫Ω icon sau
            draw.text((x_pos + icon_width_start + text_width + 20, start_y), icon_end, font=font_icon, fill=text_color)

            start_y += 50  # D√£n d√≤ng

        # Hi·ªÉn th·ªã ng√†y gi·ªù (g√≥c ph·∫£i, b√™n ngo√†i h·ªôp)
        now = datetime.now().strftime("%d/%m/%Y - %H:%M")
        date_width = draw.textlength(now, font=date_font)
        draw.text((size[0] - date_width - 30, size[1] - 60), now, font=date_font, fill=text_color)

        # L∆∞u ·∫£nh v√†o b·ªô nh·ªõ
        img_bytes = io.BytesIO()
        bg_image.convert("RGB").save(img_bytes, format='PNG')
        img_bytes.seek(0)

        return img_bytes

    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o ·∫£nh: {e}")
        return None

def i4tt(message, message_object, thread_id, thread_type, author_id, client):
    content = message.strip().split()

    if len(content) < 2:
        client.replyMessage(Message(text="‚ùå Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng TikTok h·ª£p l·ªá."), message_object, thread_id, thread_type)
        return

    tiktok_username = content[1].strip()
    api_url = f"https://api.sumiproject.net/tiktok?info={tiktok_username}"

    try:
        response = requests.get(api_url, timeout=10)
        response.raise_for_status()
        data = response.json()

        if 'data' not in data or 'user' not in data['data']:
            client.replyMessage(Message(text="‚ö† Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n TikTok."), message_object, thread_id, thread_type)
            return

        user_data = data['data']['user']
        stats_data = data['data']['stats']

        nickname = user_data.get('nickname', 'Kh√¥ng c√≥')
        followers = f"{stats_data.get('followerCount', 0):,}"
        following = f"{stats_data.get('followingCount', 0):,}"
        video_count = f"{stats_data.get('videoCount', 0):,}"
        heart_count = f"{stats_data.get('heartCount', 0):,}"
        bio = user_data.get('signature', 'Kh√¥ng c√≥')

        # G·ª≠i tin nh·∫Øn vƒÉn b·∫£n ri√™ng v·ªÅ follow TikTok
        client.replyMessage(Message(text="üé∂ H√£y fl _m.vu210_ üé∂ ‚ù§Ô∏è C·∫£m ∆°n b·∫°n ƒë√£ ·ªßng h·ªô!"), message_object, thread_id, thread_type)

        # T·∫°o ·∫£nh menu bot
        img_bytes = create_image()

        # Tin nh·∫Øn chi ti·∫øt th√¥ng tin TikTok
        msg = (
            f"üìå Th√¥ng tin TikTok c·ªßa @{tiktok_username}\n"
            f"üë§ T√™n TikTok: {nickname}\n"
            f"üìä Followers: {followers}\n"
            f"üë• ƒêang Follow: {following}\n"
            f"üé• S·ªë video: {video_count}\n"
            f"‚ù§Ô∏è L∆∞·ª£t th√≠ch: {heart_count}\n"
            f"üìù Ti·ªÉu s·ª≠: {bio}\n"
            f"üëë Creator: Minh V≈©"
        )

        client.replyMessage(Message(text=msg), message_object, thread_id, thread_type)

        # G·ª≠i ·∫£nh
        if img_bytes:
            client.sendImage(img_bytes, thread_id, thread_type)

    except Exception as e:
        client.replyMessage(Message(text=f"üí¢ ƒê√£ x·∫£y ra l·ªói: {str(e)}"), message_object, thread_id, thread_type)

def get_szl():
    return {
        'i4tt': i4tt
    }